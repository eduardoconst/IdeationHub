/**
 * RESUMO: authService.ts
 * 
 * Servi√ßos de autentica√ß√£o para comunica√ß√£o com o backend
 * - Cadastro de usu√°rios
 * - Login de usu√°rios
 * - Logout
 * - Verifica√ß√£o de token
 */

import api from './api';

// Interface para dados de cadastro
export interface SignupData {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
}

// Interface para dados de login
export interface LoginData {
  email: string;
  password: string;
}

// Interface para resposta do usu√°rio
export interface UserResponse {
  id: number;
  name: string;
  email: string;
  admin: boolean;
  token?: string;
}

/**
 * Cadastra um novo usu√°rio
 */
export const signup = async (userData: SignupData): Promise<UserResponse> => {
  try {
    const response = await api.post('/signup', userData);
    
    // Se o cadastro foi bem-sucedido e retornou um token
    if (response.data.token) {
      localStorage.setItem('token', response.data.token);
    }
    
    return response.data;
  } catch (error: any) {
    // Tratamento de erros espec√≠ficos
    if (error.response?.data?.message) {
      throw new Error(error.response.data.message);
    }
    throw new Error('Erro ao criar conta. Tente novamente.');
  }
};

/**
 * Faz login do usu√°rio
 */
export const login = async (credentials: LoginData): Promise<UserResponse> => {
  try {
    const response = await api.post('/signin', credentials);
    
    // Salva o token no localStorage
    if (response.data.token) {
      localStorage.setItem('token', response.data.token);
    }
    
    return response.data;
  } catch (error: any) {
    if (error.response?.data?.message) {
      throw new Error(error.response.data.message);
    }
    throw new Error('Email ou senha incorretos.');
  }
};

/**
 * Faz logout do usu√°rio
 */
export const logout = () => {
  localStorage.removeItem('token');
};

/**
 * Verifica se o usu√°rio est√° autenticado
 */
export const isAuthenticated = (): boolean => {
  const token = localStorage.getItem('token');
  return !!token;
};

/**
 * Obt√©m dados do usu√°rio atual
 */
export const getCurrentUser = async (): Promise<UserResponse | null> => {
  try {
    if (!isAuthenticated()) {
      console.log('‚ùå N√£o autenticado - sem token');
      return null;
    }
    
    console.log('üîç Validando token com backend...');
    
    // Usar uma rota protegida que j√° valida o token no header
    // Como n√£o temos /users/me, vamos usar validateToken corretamente
    const token = localStorage.getItem('token');
    console.log('üîë Token:', token?.substring(0, 20) + '...');
    
    const response = await api.post('/validateToken', { token });
    console.log('üì° Resposta validateToken:', response.data);
    
    // Se validateToken retorna true, precisamos decodificar o token para obter os dados
    if (response.data === true) {
      console.log('‚úÖ Token v√°lido, decodificando...');
      // Decodificar token JWT para obter dados do usu√°rio
      const payload = JSON.parse(atob(token!.split('.')[1]));
      console.log('üë§ Dados do usu√°rio:', payload);
      
      return {
        id: payload.id,
        name: payload.name,
        email: payload.email,
        admin: payload.admin
      };
    }
    
    console.log('‚ùå Token inv√°lido');
    throw new Error('Token inv√°lido');
  } catch (error) {
    console.error('‚ùå Erro ao validar token:', error);
    logout(); // Remove token inv√°lido
    return null;
  }
};
