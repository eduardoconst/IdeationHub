const admin = require('./admin') // Importa o middleware de admin

module.exports = app => {

// rotas de autentica칞칚o
    app.post('/signup', app.api.user.save)  // cadastro de usuario
    app.post('/signin', app.api.auth.signin) // autentica칞칚o do login
    app.post('/validateToken', app.api.auth.validateToken) //valida칞칚o do token


// rotas de usuario
    // Primeiro, rotas espec칤ficas de usu치rio (devem vir antes da rota gen칠rica /users)
    
    // Atualizar dados do perfil (nome)
    app.route('/users/profile')
        .all(app.config.passport.authenticate()) // autentica o token
        .put(app.api.user.updateProfile) // usu치rio pode atualizar seu pr칩prio perfil

    // Alterar senha
    app.route('/users/password')
        .all(app.config.passport.authenticate()) // autentica o token
        .put(app.api.user.changePassword) // usu치rio pode alterar sua pr칩pria senha

    // Deletar pr칩pria conta
    app.route('/users/account')
        .all(app.config.passport.authenticate()) // autentica o token
        .delete(app.api.user.deleteOwnAccount) // usu치rio pode deletar sua pr칩pria conta

    // Rota para buscar total de usu치rios cadastrados (p칰blica para estat칤sticas)
    app.route('/users/total-count')
        .get(app.api.user.getTotalUsers) // P칰blico para mostrar estat칤sticas

    // Rotas gen칠ricas de usu치rio (admin apenas)
    app.route('/users')
        .all(app.config.passport.authenticate()) // autentica o token
        .post(app.api.user.save) 
        .get(admin(app.api.user.get)) // apenas admin pode ver todos os usuarios

    app.route('/users/:id') 
        .all(app.config.passport.authenticate()) // autentica o token
        .put(admin(app.api.user.save))
        .get(admin(app.api.user.getById))
        .delete(admin(app.api.user.remove)) // apenas admin pode remover usuarios

// rotas de card
    app.route('/cards')
        .post(app.config.passport.authenticate(), app.api.card.save) // requer autentica칞칚o para criar
        .get(app.api.card.get) // p칰blico para listar cards

    
    app.route('/cards/:id')
        .put(app.config.passport.authenticate(), admin(app.api.card.save)) // requer auth + admin para editar
        .delete(app.config.passport.authenticate(), admin(app.api.card.remove)) // requer auth + admin para deletar
        .get(app.api.card.getById) // p칰blico para visualizar card espec칤fico 

// rotas de votos
    app.route('/votes') 
        .all(app.config.passport.authenticate()) // autentica o token
        .post(app.api.vote.save) 
        .get(admin(app.api.vote.get)) 

    // Nova rota: Obter votos agrupados por card
    app.route('/votes/grouped')
        .all(app.config.passport.authenticate()) // autentica o token
        .get(admin(app.api.vote.getGroupedByCard)) 

    // Nova rota: Obter apenas votos vis칤veis
    app.route('/votes/visible')
        .all(app.config.passport.authenticate()) // autentica o token
        .get(admin(app.api.vote.getVisibleVotes)) 

    // Rota para buscar voto espec칤fico de um usu치rio em um card
    app.route('/votes/user/:userId/card/:cardId')
        .get(app.api.vote.getUserVoteForCard) // P칰blico para mostrar votos
        .delete(app.api.vote.removeVote) // Permite remover voto

    // Rota para buscar contagem de votos de um card
    app.route('/votes/count/:cardId')
        .get(app.api.vote.getCardVoteCount) // P칰blico para mostrar contagem

    // Rota para buscar total de votos positivos de todos os cards
    app.route('/votes/total-positive')
        .get(app.api.vote.getTotalPositiveVotes) // P칰blico para mostrar estat칤sticas

    // Rota de debug (tempor치ria)
    app.route('/votes/debug/:cardId/:userId')
        .get(app.api.vote.debugVoteData) // Debug dos dados de voto

// Rotas administrativas
    // Estat칤sticas gerais do sistema
    app.route('/admin/stats')
        .all(app.config.passport.authenticate()) // autentica o token
        .get(admin(app.api.admin.getStats)) // apenas admin pode ver estat칤sticas

    // Gerenciamento de usu치rios
    app.route('/admin/users')
        .all(app.config.passport.authenticate()) // autentica o token
        .get(admin(app.api.admin.getAllUsers)) // listar todos os usu치rios

    app.route('/admin/users/:id/promote')
        .all(app.config.passport.authenticate()) // autentica o token
        .patch(admin(app.api.admin.promoteUser)) // promover usu치rio a admin

    app.route('/admin/users/:id/demote')
        .all(app.config.passport.authenticate()) // autentica o token
        .patch(admin(app.api.admin.demoteUser)) // remover admin de usu치rio

    app.route('/admin/users/:id/delete')
        .all(app.config.passport.authenticate()) // autentica o token
        .delete(admin(app.api.admin.deleteUser)) // excluir usu치rio

    // A칞칫es do sistema
    app.route('/admin/refresh')
        .all(app.config.passport.authenticate()) // autentica o token
        .post(admin(app.api.admin.refreshData)) // atualizar cache/dados

    app.route('/admin/export')
        .all(app.config.passport.authenticate()) // autentica o token
        .get(admin(app.api.admin.exportData)) // exportar dados do sistema

    app.route('/admin/cleanup')
        .all(app.config.passport.authenticate()) // autentica o token
        .post(admin(app.api.admin.cleanupOldData)) // limpar dados antigos

    app.route('/admin/backup')
        .all(app.config.passport.authenticate()) // autentica o token
        .post(admin(app.api.admin.createBackup)) // criar backup do sistema

// rotas de perfil do usu치rio
    // Teste de autentica칞칚o
    app.route('/test/auth')
        .all(app.config.passport.authenticate()) // autentica o token
        .get((req, res) => {
            console.log('游빍 Teste de autentica칞칚o');
            console.log('游녻 req.user:', req.user);
            res.json({ 
                message: 'Autentica칞칚o funcionando!', 
                user: req.user,
                timestamp: new Date()
            });
        })

// rotas de relat칩rios
    // Relat칩rio do dashboard (s칩 admins)
    app.route('/api/reports/dashboard')
        .all(app.config.passport.authenticate()) // autentica o token
        .get(admin(app.api.reports.getDashboardMetrics)) // s칩 admin pode acessar

    // Relat칩rio de usu치rios (s칩 admins)
    app.route('/api/reports/users')
        .all(app.config.passport.authenticate()) // autentica o token
        .get(admin(app.api.reports.getUsersReport)) // s칩 admin pode acessar

    // Relat칩rio de ideias (s칩 admins)
    app.route('/api/reports/ideas')
        .all(app.config.passport.authenticate()) // autentica o token
        .get(admin(app.api.reports.getIdeasReport)) // s칩 admin pode acessar

    // Relat칩rio de engajamento (s칩 admins)
    app.route('/api/reports/engagement')
        .all(app.config.passport.authenticate()) // autentica o token
        .get(admin(app.api.reports.getEngagementReport)) // s칩 admin pode acessar

    // Relat칩rio pessoal do usu치rio
    app.route('/api/reports/personal')
        .all(app.config.passport.authenticate()) // autentica o token
        .get(app.api.reports.getUserPersonalReport) // usu치rio logado pode acessar

    // Relat칩rio espec칤fico de uma ideia (s칩 admins)
    app.route('/api/reports/idea/:id')
        .all(app.config.passport.authenticate()) // autentica o token
        .get(admin(app.api.reports.getIdeaReport)) // s칩 admin pode acessar

};
