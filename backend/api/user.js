const bcrpt = require('bcrypt-nodejs') // Importa o m√≥dulo bcrypt-nodejs



// Exporta uma fun√ß√£o que recebe app como par√¢metro
module.exports = app => { 
    const { existsOrError, notExistsOrError, equalsOrError } = app.api.validation // Importa as fun√ß√µes existsOrError, notExistsOrError e equalsOrError do m√≥dulo app.api.validation

    const encryptPassword = password => { 
        const salt = bcrpt.genSaltSync(10) // Gera um salt para a senha
        return bcrpt.hashSync(password, salt) // Retorna a senha criptografada
    }

    const save = async (req, res) => {
        const users = { ...req.body } // Recebe os dados do corpo da requisi√ß√£o
        if(req.params.id) users.id = req.params.id // Se houver um id na requisi√ß√£o, ele √© atribu√≠do ao objeto users

        if(!req.originalUrl.startsWith('/users')) users.admin = false // Se a URL original n√£o come√ßar com /users, o usu√°rio n√£o √© admin
        if(!req.user || !req.user.admin) users.admin = false // Se n√£o houver um usu√°rio logado ou se o usu√°rio n√£o for admin, o usu√°rio n√£o √© admin
            

        try{
            existsOrError(users.name, 'Nome n√£o informado') 
            existsOrError(users.email, 'E-mail n√£o informado') 
            existsOrError(users.password, 'Senha n√£o informada') 
            existsOrError(users.confirmPassword, 'Confirma√ß√£o de senha inv√°lida') 
            equalsOrError(users.password, users.confirmPassword, 'Senhas n√£o conferem') 

            const userFromDB = await app.db('users') 
                . where({ email: users.email })
                .first() // Busca o usu√°rio no banco de dados
            if(!users.id){
                notExistsOrError(userFromDB, 'Usu√°rio j√° cadastrado') // Verifica se o usu√°rio j√° est√° cadastrado
            }
        } catch(msg) {
            return res.status(400).send(msg) // Se houver erro, retorna o erro
        }

        users.password = encryptPassword(users.password) // Criptografa a senha
        delete users.confirmPassword  // Deleta a confirma√ß√£o de senha

        if(users.id) { // Se houver um id no objeto users
            app.db('users') // Atualiza o usu√°rio
                .update(users) 
                .where({ id: users.id })
                .whereNull('deleted_at') // Busca apenas usu√°rios que n√£o foram exclu√≠dos
                .then(_ => res.status(204).send()) // Se a atualiza√ß√£o for bem sucedida, retorna status 204
                .catch(err => res.status(500).send(err)) // Se houver erro, retorna status 500
        } else { // Se n√£o houver um id no objeto users
            app.db('users') // Insere o usu√°rio
                .insert(users)
                .then(_ => res.status(204).send()) // Se a inser√ß√£o for bem sucedida, retorna status 204
                .catch(err => res.status(500).send(err)) // Se houver erro, retorna
        }
    }

    // Fun√ß√£o que busca os usu√°rios
    const get = (req, res) => { 
        app.db('users') 
            .select('id', 'name', 'email', 'admin') 
            .whereNull('deleted_at') // Busca apenas usu√°rios que n√£o foram exclu√≠dos
            .then(users => res.json(users)) 
            .catch(err => res.status(500).send(err)) 
    }  
    
    // Fun√ß√£o que busca um usu√°rio por id
    const getById = (req, res) => { 
        const userId = req.params.id;
        
        // Valida√ß√£o do par√¢metro ID
        if (!userId || isNaN(userId) || userId <= 0) {
            return res.status(400).json({ error: 'ID de usu√°rio inv√°lido' });
        }
        
        app.db('users')
            .select('id', 'name', 'email', 'admin')
            .where({ id: parseInt(userId) })
            .whereNull('deleted_at') // Busca apenas usu√°rios que n√£o foram exclu√≠dos
            .first()
            .then(user => {
                if (!user) {
                    return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
                }
                res.json(user);
            })
            .catch(err => {
                console.error('Erro ao buscar usu√°rio por ID:', err);
                res.status(500).json({ error: 'Erro interno do servidor' });
            });
    }

    // Fun√ß√£o que busca o total de usu√°rios cadastrados
    const getTotalUsers = async (req, res) => {
        try {
            const result = await app.db('users')
                .whereNull('deleted_at') // Conta apenas usu√°rios que n√£o foram exclu√≠dos
                .count('* as total');
            
            const total = parseInt(result[0].total) || 0;
            res.json({ total });
        } catch (error) {
            console.error('Erro ao buscar total de usu√°rios:', error);
            res.status(500).send('Erro interno do servidor');
        }
    };


    const remove = async (req, res) => { 
        try{
            const userId = req.params.id;
            
            // Valida√ß√£o do par√¢metro ID
            if (!userId || isNaN(userId) || userId <= 0) {
                return res.status(400).json({ error: 'ID de usu√°rio inv√°lido' });
            }
            
            const parsedUserId = parseInt(userId);
            
            // Verifica se o usu√°rio existe antes de tentar remover
            const userExists = await app.db('users')
                .where({ id: parsedUserId })
                .whereNull('deleted_at')
                .first();
                
            if (!userExists) {
                return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
            }
            
            // Busca os cart√µes do usu√°rio que ainda est√£o com vota√ß√£o em aberto
            const activeCards = await app.db('cards') 
                .where({ userID: parsedUserId })
                .where('voting_end', '>', new Date()) // Verifica se a data de t√©rmino da vota√ß√£o √© maior que agora
                .andWhere('status', 'active') // Verifica se o status do card est√° ativo
            
            if(activeCards && activeCards.length > 0) {
                return res.status(400).json({ error: 'Usu√°rio possui cards com vota√ß√£o ainda em aberto' });
            }

            const rowsDeleted = await app.db('users') // Exclui o usu√°rio
                .update({ deleted_at: new Date() }) // Define a data de exclus√£o
                .where({ id: parsedUserId }) // Filtra pelo id do usu√°rio
                .whereNull('deleted_at') // Garante que o usu√°rio n√£o foi exclu√≠do anteriormente
            
            existsOrError(rowsDeleted, 'Usu√°rio n√£o foi encontrado') // Verifica se o usu√°rio foi encontrado

            res.status(204).send() // Retorna status 204 se a exclus√£o for bem sucedida
        } catch(msg) {
            console.error('Erro ao remover usu√°rio:', msg);
            return res.status(400).json({ error: typeof msg === 'string' ? msg : 'Erro ao remover usu√°rio' });
        }
    }

    // Fun√ß√£o para atualizar apenas o perfil do usu√°rio (nome)
    const updateProfile = async (req, res) => {
        console.log('üîÑ Tentativa de atualizar perfil');
        console.log('üìÑ Body da requisi√ß√£o:', req.body);
        console.log('üë§ Usu√°rio autenticado:', req.user);
        
        const { name } = req.body;
        const userId = req.user?.id; // Obt√©m o ID do usu√°rio logado

        try {
            if (!userId) {
                console.log('‚ùå ID do usu√°rio n√£o encontrado no token');
                return res.status(401).json({ error: 'Usu√°rio n√£o autenticado' });
            }

            existsOrError(name, 'Nome n√£o informado');
            
            if (name.trim().length < 2) {
                return res.status(400).json({ error: 'Nome deve ter pelo menos 2 caracteres' });
            }
            
            if (name.trim().length > 100) {
                return res.status(400).json({ error: 'Nome deve ter no m√°ximo 100 caracteres' });
            }

            console.log(`üîß Atualizando usu√°rio ID ${userId} com nome: ${name.trim()}`);

            // Verifica se o usu√°rio existe antes de atualizar
            const userExists = await app.db('users')
                .where({ id: userId })
                .whereNull('deleted_at')
                .first();
                
            if (!userExists) {
                return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
            }

            const rowsUpdated = await app.db('users')
                .update({ name: name.trim() })
                .where({ id: userId })
                .whereNull('deleted_at');

            console.log(`‚úÖ Linhas atualizadas: ${rowsUpdated}`);

            existsOrError(rowsUpdated, 'Usu√°rio n√£o encontrado');

            // Busca os dados atualizados do usu√°rio
            const updatedUser = await app.db('users')
                .select('id', 'name', 'email', 'admin')
                .where({ id: userId })
                .whereNull('deleted_at')
                .first();

            console.log('üìã Dados do usu√°rio atualizado:', updatedUser);

            res.json(updatedUser);
        } catch (msg) {
            console.log('‚ùå Erro ao atualizar perfil:', msg);
            return res.status(400).json({ error: typeof msg === 'string' ? msg : 'Erro ao atualizar perfil' });
        }
    };

    // Fun√ß√£o para alterar senha do usu√°rio
    const changePassword = async (req, res) => {
        const { currentPassword, newPassword, confirmPassword } = req.body;
        const userId = req.user.id;

        try {
            existsOrError(currentPassword, 'Senha atual n√£o informada');
            existsOrError(newPassword, 'Nova senha n√£o informada');
            existsOrError(confirmPassword, 'Confirma√ß√£o de senha n√£o informada');
            equalsOrError(newPassword, confirmPassword, 'Senhas n√£o conferem');

            if (newPassword.length < 6) {
                return res.status(400).send('Nova senha deve ter pelo menos 6 caracteres');
            }

            // Busca o usu√°rio atual para verificar a senha
            const user = await app.db('users')
                .where({ id: userId })
                .whereNull('deleted_at')
                .first();

            existsOrError(user, 'Usu√°rio n√£o encontrado');

            // Verifica se a senha atual est√° correta
            const isValidPassword = bcrpt.compareSync(currentPassword, user.password);
            if (!isValidPassword) {
                return res.status(400).send('Senha atual incorreta');
            }

            // Verifica se a nova senha √© diferente da atual
            const isSamePassword = bcrpt.compareSync(newPassword, user.password);
            if (isSamePassword) {
                return res.status(400).send('A nova senha deve ser diferente da atual');
            }

            // Criptografa a nova senha
            const encryptedPassword = encryptPassword(newPassword);

            // Atualiza a senha no banco
            const rowsUpdated = await app.db('users')
                .update({ password: encryptedPassword })
                .where({ id: userId })
                .whereNull('deleted_at');

            existsOrError(rowsUpdated, 'Erro ao atualizar senha');

            res.status(204).send();
        } catch (msg) {
            return res.status(400).send(msg);
        }
    };

    // Fun√ß√£o para deletar a pr√≥pria conta
    const deleteOwnAccount = async (req, res) => {
        const userId = req.user.id;

        try {
            // Verifica se o usu√°rio tem cards com vota√ß√£o ativa
            const activeCards = await app.db('cards')
                .where({ userID: userId })
                .where('voting_end', '>', new Date())
                .andWhere('status', 'active');

            if (activeCards && activeCards.length > 0) {
                return res.status(400).send('Voc√™ possui ideias com vota√ß√£o ainda em aberto. Aguarde o t√©rmino das vota√ß√µes para deletar sua conta.');
            }

            // Soft delete do usu√°rio
            const rowsDeleted = await app.db('users')
                .update({ deleted_at: new Date() })
                .where({ id: userId })
                .whereNull('deleted_at');

            existsOrError(rowsDeleted, 'Usu√°rio n√£o encontrado');

            res.status(204).send();
        } catch (msg) {
            return res.status(400).send(msg);
        }
    };


    // Retorna as fun√ß√µes save e get
    return { save, get , getById , remove , getTotalUsers , updateProfile , changePassword , deleteOwnAccount } 
}